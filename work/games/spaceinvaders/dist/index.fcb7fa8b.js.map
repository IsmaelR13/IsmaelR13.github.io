{"mappings":"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","sources":["<anon>","main.js"],"sourcesContent":["let config = {\n    type: Phaser.AUTO,\n    width: 800,\n    height: 600,\n    physics: {\n        default: \"arcade\",\n        arcade: {\n            gravity: {\n                y: 0\n            },\n            debug: false\n        }\n    },\n    scene: {\n        preload: preload,\n        create: create,\n        update: update\n    }\n};\nlet game = new Phaser.Game(config);\nenemyInfo = {\n    width: 40,\n    height: 20,\n    count: {\n        row: 5,\n        col: 9\n    },\n    offset: {\n        top: 100,\n        left: 60\n    },\n    padding: 5\n};\nlet move = new Howl({\n    src: [\n        \"assets/move.mp3\"\n    ]\n});\nlet shootSound = new Howl({\n    src: [\n        \"assets/shoot.mp3\"\n    ]\n});\nlet explosionSound = new Howl({\n    src: [\n        \"assets/explosion.mp3\"\n    ]\n});\nlet saucerSound = new Howl({\n    src: [\n        \"assets/saucer.mp3\"\n    ],\n    loop: true\n});\nfunction preload() {\n    this.load.image(\"shooter\", \"assets/cannon.svg\");\n    this.load.image(\"alien1\", \"assets/enemy.svg\");\n    this.load.image(\"bullet\", \"assets/bullet.svg\");\n    this.load.image(\"saucer\", \"assets/saucer.svg\");\n    this.load.image(\"alien2\", \"assets/enemyLevel2.svg\");\n    this.load.image(\"alien3\", \"assets/enemyLevel3.svg\");\n}\nlet level = 1;\nlet score = 0;\nlet lives = 3;\nlet isStarted = false;\nlet barriers = [];\nlet ufoCount = 0;\nfunction create() {\n    scene = this;\n    cursors = scene.input.keyboard.createCursorKeys();\n    keyA = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.A);\n    keyD = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.D);\n    let isShooting1 = false;\n    enemies = this.physics.add.staticGroup();\n    playerLava = scene.add.rectangle(0, 0, 800, 10, 0x000).setOrigin(0);\n    enemyLava = scene.add.rectangle(0, 590, 800, 10, 0x000).setOrigin(0);\n    saucerLava = scene.add.rectangle(790, 0, 10, 600, 0x000).setOrigin(0);\n    scene.physics.add.existing(playerLava);\n    scene.physics.add.existing(enemyLava);\n    scene.physics.add.existing(saucerLava);\n    shooter = scene.physics.add.sprite(400, 560, \"shooter\");\n    shooter.setCollideWorldBounds(true);\n    scoreText = scene.add.text(16, 16, `Score: ${score}`, {\n        fontSize: \"18px\",\n        fill: \"#FFF\"\n    });\n    livesText = scene.add.text(696, 16, `Lives: ${lives}`, {\n        fontSize: \"18px\",\n        fill: \"#FFF\"\n    });\n    startText = scene.add.text(400, 300, \"Click to Play\", {\n        fontSize: \"18px\",\n        fill: \"#FFF\"\n    }).setOrigin(0.5);\n    levelText = scene.add.text(16, 564, `Level: ${level}`, {\n        fontSize: \"18px\",\n        fill: \"#FFF\"\n    });\n    this.input.keyboard.on(\"keydown-SPACE\", shoot);\n    barriers.push(new Barrier(scene, 50, 450));\n    barriers.push(new Barrier(scene, 370, 450));\n    barriers.push(new Barrier(scene, 690, 450));\n    this.input.on(\"pointerdown\", function() {\n        if (isStarted == false) {\n            isStarted = true;\n            startText.destroy();\n            setInterval(makeSaucer, 15000);\n        } else shoot();\n    });\n    initEnemies();\n}\nfunction update() {\n    if (isStarted == true) {\n        if (cursors.left.isDown || keyA.isDown) shooter.setVelocityX(-160);\n        else if (cursors.right.isDown || keyD.isDown) shooter.setVelocityX(160);\n        else shooter.setVelocityX(0);\n    }\n    if (level === 4) end(\"Win\");\n}\nfunction shoot() {\n    if (isStarted == true) {\n        if (isShooting === false) {\n            manageBullet(scene.physics.add.sprite(shooter.x, shooter.y, \"bullet\"));\n            isShooting = true;\n            shootSound.play();\n        }\n    }\n}\nfunction initEnemies() {\n    for(c = 0; c < enemyInfo.count.col; c++)for(r = 0; r < enemyInfo.count.row; r++){\n        let enemyX = c * (enemyInfo.width + enemyInfo.padding) + enemyInfo.offset.left;\n        let enemyY = r * (enemyInfo.height + enemyInfo.padding) + enemyInfo.offset.top;\n        enemies.create(enemyX, enemyY, \"alien\" + level).setOrigin(0.5);\n    }\n}\nlet movementMult = 1000 / level;\nsetInterval(moveEnemies, movementMult);\nlet xTimes = 0;\nlet yTimes = 0;\nlet dir = \"right\";\nfunction moveEnemies() {\n    if (isStarted === true) {\n        move.play();\n        if (xTimes === 30) {\n            if (dir === \"right\") {\n                dir = \"left\";\n                xTimes = 0;\n            } else {\n                dir = \"right\";\n                xTimes = 0;\n            }\n        }\n        if (dir === \"right\") {\n            enemies.children.each(function(enemy) {\n                enemy.x = enemy.x + 10;\n                enemy.body.reset(enemy.x, enemy.y);\n            }, this);\n            xTimes++;\n        } else {\n            enemies.children.each(function(enemy) {\n                enemy.x = enemy.x - 10;\n                enemy.body.reset(enemy.x, enemy.y);\n            }, this);\n            xTimes++;\n        }\n    }\n}\nfunction manageBullet(bullet) {\n    bullet.setVelocityY(-380);\n    let i = setInterval(function() {\n        enemies.children.each(function(enemy) {\n            if (checkOverlap(bullet, enemy)) {\n                bullet.destroy();\n                clearInterval(i);\n                isShooting = false;\n                enemy.destroy();\n                score++;\n                scoreText.setText(\"Score: \" + score);\n                explosionSound.play();\n                if (score - ufoCount === enemyInfo.count.col * enemyInfo.count.row * level) {\n                    level++;\n                    levelText.setText(`Level: ${level}`);\n                    setTimeout(()=>{\n                        initEnemies();\n                    }, 5000);\n                }\n            }\n        }, this);\n        for(let step = 0; step < barriers.length; step++)if (barriers[step].checkCollision(bullet)) {\n            bullet.destroy();\n            clearInterval(i);\n            isShooting = false;\n            scoreText.setText(`Score: ${score}`);\n            explosionSound.play();\n            if (score - ufoCount === enemyInfo.count.col * enemyInfo.count.row * level) {\n                level++;\n                levelText.setText(`Level: ${level}`);\n                setTimeout(()=>{\n                    initEnemies();\n                }, 5000);\n            }\n        }\n        for(let step = 0; step < saucers.length; step++){\n            let saucer = saucers[step];\n            if (checkOverlap(bullet, saucer)) {\n                bullet.destroy();\n                clearInterval(i);\n                isShooting = false;\n                scoreText.setText(`Score: ${score}`);\n                explosionSound.play();\n                if (score - ufoCount === enemyInfo.count.col * enemyInfo.count.row * level) {\n                    level++;\n                    levelText.setText(`Level: ${level}`);\n                    setTimeout(()=>{\n                        initEnemies();\n                    }, 5000);\n                }\n                saucer.destroy();\n                saucer.isDestroyed = true;\n                saucerSound.stop();\n                score++;\n                ufoCount++;\n            }\n        }\n    }, 10);\n    scene.physics.add.overlap(bullet, playerLava, function() {\n        bullet.destroy();\n        clearInterval(i);\n        explosionSound.play();\n        isShooting = false;\n    });\n}\n//sets velocity of bullet based on level velocity gets faster with difficulty\nlet bulletVelocityMult = 200 * level - 100;\nlet enemyBulletVelo = bulletVelocityMult;\nfunction manageEnemyBullet(bullet, enemy) {\n    let angle = Phaser.Math.Angle.BetweenPoints(enemy, shooter);\n    scene.physics.velocityFromRotation(angle, enemyBulletVelo, bullet.body.velocity);\n    enemyBulletVelo = enemyBulletVelo + 2;\n    let i = setInterval(function() {\n        if (checkOverlap(bullet, shooter)) {\n            bullet.destroy();\n            clearInterval(i);\n            lives;\n            livesText.setText(`Lives: ${lives}`);\n            explosionSound.play();\n            if (lives == 0) end(\"Lose\");\n        }\n        for(let step = 0; step < barriers.length; step++)if (barriers[step].checkCollision(bullet)) {\n            bullet.destroy();\n            clearInterval(i);\n            isShooting = false;\n            scoreText.setText(`Score: ${score}`);\n            explosionSound.play();\n        }\n    }, 10);\n    scene.physics.add.overlap(bullet, enemyLava, function() {\n        bullet.destroy();\n        explosionSound.play();\n        clearInterval(i);\n    });\n}\nfunction checkOverlap(spriteA, spriteB) {\n    let boundsA = spriteA.getBounds();\n    let boundsB = spriteB.getBounds();\n    return Phaser.Geom.Intersects.RectangleToRectangle(boundsA, boundsB);\n}\n//Enemy Fire\nlet enemyFireMult = 3000 / level + 500;\nsetInterval(enemyFire, enemyFireMult);\nfunction enemyFire() {\n    if (isStarted === true) {\n        let enemy = enemies.children.entries[Phaser.Math.Between(0, enemies.children.entries.length - 1)];\n        manageEnemyBullet(scene.physics.add.sprite(enemy.x, enemy.y, \"bullet\"), enemy);\n    }\n}\n//Flying Saucers\nlet saucers = [];\nfunction makeSaucer() {\n    if (isStarted == true) manageSaucer(scene.physics.add.sprite(0, 60, \"saucer\"));\n}\nsetInterval(function() {\n    if (isStarted == true) for(let i = 0; i < saucers.length; i++){\n        let saucer = saucers[i];\n        if (saucer.isDestroyed == false) manageEnemyBullet(scene.physics.add.sprite(saucer.x, saucer.y, \"bullet\"), saucer);\n        else saucers.splice(i, 1);\n    }\n}, 2000);\nfunction manageSaucer(saucer) {\n    saucers.push(saucer);\n    saucer.isDestroyed = false;\n    saucer.setVelocityX(100 * level);\n    scene.physics.add.overlap(saucer, saucerLava, function() {\n        saucer.destroy();\n        saucer.isDestroyed = true;\n        saucerSound.stop();\n    });\n    saucerSound.play();\n}\n//Barriers\nclass Barrier {\n    constructor(scene1, gx, y){\n        let x = gx;\n        y;\n        this.children = [];\n        this.scene = scene1;\n        for(let r1 = 0; r1 < 3; r1++){\n            for(let c1 = 0; c1 < 3; c1++){\n                var child = scene1.add.rectangle(x, y, 30, 20, 0x563d2d);\n                scene1.physics.add.existing(child);\n                child.health = 2;\n                this.children.push(child);\n                x = x + child.displayWidth;\n            }\n            x = gx;\n            y = y + child.displayHeight;\n        }\n        this.children[this.children.length - 2].destroy();\n        this.children.splice(this.children.length - 2, 1);\n    }\n    checkCollision(sprite) {\n        let isTouching = false;\n        for(let i = 0; i < this.children.length; i++){\n            let child = this.children[i];\n            if (checkOverlap(sprite, child)) {\n                isTouching = true;\n                if (this.children[i].health === 1) {\n                    child.destroy();\n                    this.children.splice(i, 1);\n                } else this.children[i].health--;\n                break;\n            }\n        }\n        return isTouching;\n    }\n}\nfunction end(con) {\n    explosionSound.stop();\n    saucerSound.stop();\n    shootSound.stop();\n    move.stop();\n    alert(`You ${con}! Score: ` + score);\n    location.reload();\n}\n\n//# sourceMappingURL=index.fcb7fa8b.js.map\n","let config = {\n    type: Phaser.AUTO,\n    width: 800,\n    height: 600,\n    physics: {\n        default: 'arcade',\n        arcade: {\n            gravity: { y: 0 },\n            debug: false\n        }\n    },\n    scene: {\n        preload: preload,\n        create: create,\n        update: update\n    }\n};\n\nlet game = new Phaser.Game(config);\nenemyInfo = {\n    width: 40,\n    height: 20,\n    count: {\n        row: 5,\n        col: 9\n    },\n    offset: {\n        top: 100,\n        left: 60\n    },\n    padding: 5\n};\n\nlet move = new Howl({\n    src: ['assets/move.mp3']\n});\n\nlet shootSound = new Howl({\n    src: ['assets/shoot.mp3']\n});\n\nlet explosionSound = new Howl({\n    src: ['assets/explosion.mp3']\n});\n\nlet saucerSound = new Howl({\n    src: ['assets/saucer.mp3'],\n    loop: true\n});\n\nfunction preload() {\n    this.load.image(\"shooter\", \"assets/cannon.svg\")\n    this.load.image(\"alien1\", \"assets/enemy.svg\")\n    this.load.image(\"bullet\", \"assets/bullet.svg\")\n    this.load.image(\"saucer\", \"assets/saucer.svg\")\n    this.load.image(\"alien2\", \"assets/enemyLevel2.svg\")\n    this.load.image(\"alien3\", \"assets/enemyLevel3.svg\")\n\n}\n\nlet level = 1;\nlet score = 0;\nlet lives = 3;\nlet isStarted = false;\nlet barriers = [];\nlet ufoCount = 0;\nfunction create() {\n    scene = this;\n    cursors = scene.input.keyboard.createCursorKeys();\n    keyA = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.A);\n    keyD = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.D);\n    let isShooting = false;\n\n    enemies = this.physics.add.staticGroup();\n    playerLava = scene.add.rectangle(0, 0, 800, 10, 0x000).setOrigin(0);\n    enemyLava = scene.add.rectangle(0, 590, 800, 10, 0x000).setOrigin(0);\n    saucerLava = scene.add.rectangle(790, 0, 10, 600, 0x000).setOrigin(0);\n    scene.physics.add.existing(playerLava)\n    scene.physics.add.existing(enemyLava)\n    scene.physics.add.existing(saucerLava)\n\n    shooter = scene.physics.add.sprite(400, 560, 'shooter');\n    shooter.setCollideWorldBounds(true)\n    \n\n    scoreText = scene.add.text(16, 16, `Score: ${score}`, { fontSize: '18px', fill: '#FFF' })\n    livesText = scene.add.text(696, 16, `Lives: ${lives}`, { fontSize: '18px', fill: '#FFF' })\n    startText = scene.add.text(400, 300, \"Click to Play\", { fontSize: '18px', fill: '#FFF' }).setOrigin(0.5)\n    levelText = scene.add.text(16, 564, `Level: ${level}`, {fontSize: '18px', fill: '#FFF' } )\n\n    this.input.keyboard.on('keydown-SPACE', shoot);\n  \n\n    barriers.push(new Barrier(scene, 50, 450))\n    barriers.push(new Barrier(scene, 370, 450))\n    barriers.push(new Barrier(scene, 690, 450))\n\n    this.input.on('pointerdown', function () {\n        if (isStarted == false) {\n            isStarted = true;\n            startText.destroy()\n            setInterval(makeSaucer, 15000)\n\n        } else {\n            shoot()\n        }\n    });\n    initEnemies()\n}\n\nfunction update() {\n    if (isStarted == true) {\n        if (cursors.left.isDown || keyA.isDown) {\n            shooter.setVelocityX(-160);\n\n        }\n        else if (cursors.right.isDown || keyD.isDown) {\n            shooter.setVelocityX(160);\n\n        }\n        else {\n            shooter.setVelocityX(0);\n\n        }\n    }\n    if (level === 4) {\n                    \n        end(\"Win\")\n    }\n}\n\nfunction shoot() {\n    if (isStarted == true) {\n        if (isShooting === false) {\n            manageBullet(scene.physics.add.sprite(shooter.x, shooter.y, \"bullet\"))\n            isShooting = true;\n            shootSound.play()\n        }\n    }\n}\n\nfunction initEnemies() {\n    for (c = 0; c < enemyInfo.count.col; c++) {\n        for (r = 0; r < enemyInfo.count.row; r++) {\n            let enemyX = (c * (enemyInfo.width + enemyInfo.padding)) + enemyInfo.offset.left;\n            let enemyY = (r * (enemyInfo.height + enemyInfo.padding)) + enemyInfo.offset.top;\n            enemies.create(enemyX, enemyY, 'alien' + level).setOrigin(0.5);\n        }\n    }\n}\n\nlet movementMult = 1000 / level;\nsetInterval(moveEnemies, movementMult)\nlet xTimes = 0;\nlet yTimes = 0;\nlet dir = \"right\"\nfunction moveEnemies() {\n    if (isStarted === true) {\n        move.play()\n        if (xTimes === 30) {\n            if (dir === \"right\") {\n                dir = \"left\"\n                xTimes = 0\n            } else {\n                dir = \"right\"\n                xTimes = 0\n            }\n        }\n        if (dir === \"right\") {\n            enemies.children.each(function (enemy) {\n\n                enemy.x = enemy.x + 10;\n                enemy.body.reset(enemy.x, enemy.y);\n\n            }, this);\n            xTimes++;\n        } else {\n            enemies.children.each(function (enemy) {\n\n                enemy.x = enemy.x - 10;\n                enemy.body.reset(enemy.x, enemy.y);\n\n            }, this);\n            xTimes++;\n\n        }\n    }\n}\n\nfunction manageBullet(bullet) {\n    bullet.setVelocityY(-380);\n\n\n    let i = setInterval(function () {\n        enemies.children.each(function (enemy) {\n\n            if (checkOverlap(bullet, enemy)) {\n                bullet.destroy();\n                clearInterval(i)\n                isShooting = false\n                enemy.destroy()\n                score++;\n                scoreText.setText(\"Score: \" + score);\n\n                explosionSound.play()\n\n             if((score - ufoCount) === ((enemyInfo.count.col * enemyInfo.count.row) * level)) {\n                    level++\n                    levelText.setText(`Level: ${level}`)\n                    setTimeout( () => {\n                        initEnemies();\n                    },5000);\n                }\n            }\n\n        }, this);\n        for (let step = 0; step < barriers.length; step++) {\n            if (barriers[step].checkCollision(bullet)) {\n                bullet.destroy();\n                clearInterval(i)\n                isShooting = false\n\n                scoreText.setText(`Score: ${score}`);\n\n\n                explosionSound.play();\n\n                if((score - ufoCount) === ((enemyInfo.count.col * enemyInfo.count.row) * level)) {\n                    level++\n                    levelText.setText(`Level: ${level}`)\n                    setTimeout( () => {\n                        initEnemies();\n                    },5000);\n                }\n\n\n            }\n        }\n\n        for (let step = 0; step < saucers.length; step++) {\n            let saucer = saucers[step];\n            if (checkOverlap(bullet, saucer)) {\n                bullet.destroy();\n                clearInterval(i)\n                isShooting = false\n\n                scoreText.setText(`Score: ${score}`);\n\n\n                explosionSound.play()\n\n                if((score - ufoCount) === ((enemyInfo.count.col * enemyInfo.count.row) * level)) {\n                    level++\n                    levelText.setText(`Level: ${level}`)\n                    setTimeout( () => {\n                        initEnemies();\n                    },5000);\n                }\n\n                saucer.destroy()\n                saucer.isDestroyed = true;\n                saucerSound.stop();\n                score++;\n                ufoCount++;\n            }\n        }\n    }, 10)\n    scene.physics.add.overlap(bullet, playerLava, function () {\n        bullet.destroy();\n        clearInterval(i);\n        explosionSound.play();\n        isShooting = false\n    })\n\n}\n\n//sets velocity of bullet based on level velocity gets faster with difficulty\nlet bulletVelocityMult = 200 * level - 100\nlet enemyBulletVelo = bulletVelocityMult;\nfunction manageEnemyBullet(bullet, enemy) {\n    let angle = Phaser.Math.Angle.BetweenPoints(enemy, shooter);\n    scene.physics.velocityFromRotation(angle, enemyBulletVelo, bullet.body.velocity);\n    enemyBulletVelo = enemyBulletVelo + 2\n    let i = setInterval(function () {\n\n        if (checkOverlap(bullet, shooter)) {\n            bullet.destroy();\n            clearInterval(i);\n            \n            lives;\n            livesText.setText(`Lives: ${lives}`);\n            explosionSound.play()\n\n            if (lives == 0) {\n                end(\"Lose\")\n            }\n        }\n        for (let step = 0; step < barriers.length; step++) {\n            if (barriers[step].checkCollision(bullet)) {\n                bullet.destroy();\n                clearInterval(i)\n                isShooting = false\n\n                scoreText.setText(`Score: ${score}`);\n\n\n                explosionSound.play()\n\n            }\n        }\n    }, 10)\n    scene.physics.add.overlap(bullet, enemyLava, function () {\n        bullet.destroy();\n        explosionSound.play();\n        clearInterval(i);\n    })\n\n}\n\n\nfunction checkOverlap(spriteA, spriteB) {\n    let boundsA = spriteA.getBounds();\n    let boundsB = spriteB.getBounds();\n    return Phaser.Geom.Intersects.RectangleToRectangle(boundsA, boundsB);\n}\n\n//Enemy Fire\nlet enemyFireMult = 3000 / level + 500\nsetInterval(enemyFire, enemyFireMult)\n\nfunction enemyFire() {\n    if (isStarted === true) {\n        let enemy = enemies.children.entries[Phaser.Math.Between(0, enemies.children.entries.length - 1)];\n        manageEnemyBullet(scene.physics.add.sprite(enemy.x, enemy.y, \"bullet\"), enemy)\n    }\n}\n\n//Flying Saucers\n\n\n\nlet saucers = [];\nfunction makeSaucer() {\n    if (isStarted == true) {\n        manageSaucer(scene.physics.add.sprite(0, 60, \"saucer\"));\n    }\n}\n\nsetInterval(function () {\n    if (isStarted == true) {\n        for (let i = 0; i < saucers.length; i++) {\n            let saucer = saucers[i];\n            if (saucer.isDestroyed == false) {\n                manageEnemyBullet(scene.physics.add.sprite(saucer.x, saucer.y, \"bullet\"), saucer)\n\n            } else {\n                saucers.splice(i, 1);\n            }\n        }\n    }\n\n}, 2000)\n\nfunction manageSaucer(saucer) {\n    saucers.push(saucer);\n    saucer.isDestroyed = false;\n    saucer.setVelocityX(100 * level);\n    scene.physics.add.overlap(saucer, saucerLava, function () {\n        saucer.destroy()\n        saucer.isDestroyed = true;\n        saucerSound.stop()\n    })\n    saucerSound.play()\n}\n\n//Barriers\nclass Barrier {\n    constructor(scene, gx, y) {\n        let x = gx;\n        y = y;\n        this.children = [];\n        this.scene = scene;\n\n        for (let r = 0; r < 3; r++) {\n            for (let c = 0; c < 3; c++) {\n                var child = scene.add.rectangle(x, y, 30, 20, 0x563d2d);\n                scene.physics.add.existing(child);\n                child.health = 2;\n                this.children.push(child)\n                x = x + child.displayWidth;\n            }\n            x = gx;\n            y = y + child.displayHeight;\n        }\n\n        this.children[this.children.length-2].destroy();\n        this.children.splice(this.children.length-2, 1);        \n    }\n    checkCollision(sprite) {\n        let isTouching = false;\n        for (let i = 0; i < this.children.length; i++) {\n            let child = this.children[i];\n            if (checkOverlap(sprite, child)) {\n                isTouching = true;\n\n                if (this.children[i].health === 1) {\n                    child.destroy();\n                    this.children.splice(i, 1);\n\n                } else {\n                    this.children[i].health--;\n\n                }\n                break;\n            }\n        }\n        return isTouching;\n    }\n}\n\nfunction end(con) {\n    explosionSound.stop();\n    saucerSound.stop();\n    shootSound.stop();\n    move.stop()\n\n    alert(`You ${con}! Score: ` + score);\n    location.reload()\n\n}"],"names":["config","type","Phaser","AUTO","width","height","physics","default","arcade","gravity","y","debug","scene","preload","load","image","create","cursors","input","keyboard","createCursorKeys","keyA","addKey","Input","Keyboard","KeyCodes","A","keyD","D","enemies","add","staticGroup","playerLava","rectangle","setOrigin","enemyLava","saucerLava","existing","shooter","sprite","setCollideWorldBounds","scoreText","text","score","fontSize","fill","livesText","startText","levelText","level","on","shoot","barriers","push","Barrier","isStarted","destroy","setInterval","makeSaucer","initEnemies","update","left","isDown","setVelocityX","right","explosionSound","stop","saucerSound","shootSound","move","alert","location","reload","Game","enemyInfo","count","row","col","offset","top","padding","Howl","src","loop","ufoCount","isShooting","manageBullet","bullet","setVelocityY","i","children","each","enemy","checkOverlap","clearInterval","setText","play","setTimeout","step","length","checkCollision","saucers","saucer","isDestroyed","overlap","x","c","r","enemyX","enemyY","xTimes","dir","body","reset","enemyBulletVelo","manageEnemyBullet","angle","Math","Angle","BetweenPoints","velocityFromRotation","velocity","spriteA","spriteB","boundsA","getBounds","boundsB","Geom","Intersects","RectangleToRectangle","entries","Between","splice","constructor","scene1","gx","r1","c1","child","health","displayWidth","displayHeight","isTouching"],"version":3,"file":"index.fcb7fa8b.js.map"}